stages:
  - tests
  - package
  - quality
  - integration
  - prerelease
  - release

workflow:
  rules:
    - changes:
      - .gitlab/**/*
      - app/**/*
      - bin/duniter_js
      - neon/**/*
      - release/**/*
      - rust-bins/**/*
      - rust-libs/**/*
      - test/**/*
      - .gitlab-ci.yml
      - Cargo.toml
      - Cargo.lock
      - index.ts
      - package.json
      - package-lock.json
      - server.ts

.env:
  image: registry.duniter.org/docker/duniter-ci:v0.2.0
  tags:
    - redshift
  before_script:
    - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    - export PATH="$HOME/.cargo/bin:$PATH"
    - export RUSTFLAGS="-D warnings"
    - export NVM_DIR="$HOME/.nvm"
    - . "$NVM_DIR/nvm.sh"
    - nvm install 10
    - nvm use 10

.rust_env:
  image: registry.duniter.org/docker/rust/rust-x64-stable-ci:latest
  tags:
    - redshift
  before_script:
    - export PATH="$HOME/.cargo/bin:$PATH"
    - rustup show && rustc --version && cargo --version

tests:
  extends: .env
  rules:
    - if: $CI_COMMIT_REF_NAME =~ /^wip*$/
      when: manual
    - if: $CI_COMMIT_TAG
      when: never
    - if: '$CI_MERGE_REQUEST_ID ||$CI_COMMIT_BRANCH == "dev" || $CI_COMMIT_BRANCH =~ /^release/'
    - when: manual
  stage: tests
  script:
    - cargo test --all
    - npm i
    - npm run format:check
    - npm test
    # Push coverage to GitLab pages
    - tar cvzf coverage.tar.gz coverage/
    # Code coverage display in GitLab
    - sed -n 23p coverage/index.html | grep -Po "\d+.\d+" | sed -e "s/\(.*\)/<coverage>\1%<\/coverage>/"
  coverage: '/<coverage>(\d+.\d+\%)<\/coverage>/'
  artifacts:
    paths:
      - coverage.tar.gz
    expire_in: 72h

fmt_and_clippy:
  extends: .env
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_MERGE_REQUEST_ID
    - when: on_success
  stage: quality
  script:
    - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    - export PATH="$HOME/.cargo/bin:$PATH"
    - cargo fmt -- --version
    - cargo fmt -- --check
    - cargo clippy -- -V
    - cargo clippy --all --tests -- -D warnings --verbose
    
audit_dependencies:
  extends: .rust_env
  before_script:
    - cargo deny -V
  stage: quality
  script:
    - cargo deny --workspace check

.integration_rules:
  allow_failure: true
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: manual

sync_g1:
  extends:
    - .env
    - .integration_rules
  stage: integration
  script:
    - npm i
    - bash .gitlab/test/check_g1_sync.sh

sync_gtest:
  extends:
    - .env
    - .integration_rules
  stage: integration
  script:
    - npm i
    - bash .gitlab/test/check_gt_sync.sh

.build_releases:
  stage: package
  image: duniter/release-builder:v2.1.0
  cache: {}
  tags:
    - redshift
  artifacts:
    paths: &releases_artifacts
      - work/bin/

releases:test:
  extends: .build_releases
  allow_failure: true
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: manual
  script:
    - rm -rf node_modules/
    - bash "release/arch/linux/build-lin.sh" "$(date +%Y%m%d).$(date +%H%M).$(date +%S)"
  artifacts:
    paths: *releases_artifacts
    expire_in: 72h

releases:x64:
  extends: .build_releases
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - rm -rf node_modules/
    - bash "release/arch/linux/build-lin.sh" "${CI_COMMIT_TAG#v}"
  artifacts:
    paths: *releases_artifacts
    expire_in: 6 mos

.docker-build-app-image:
  stage: package
  image: docker:git
  tags:
    - docker
  before_script:
    - git config --global --add safe.directory /builds/nodes/typescript/duniter
  script:
    - docker pull $CI_REGISTRY_IMAGE:$IMAGE_TAG || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:$IMAGE_TAG --pull -t "$CI_REGISTRY_IMAGE:$IMAGE_TAG" --build-arg="INSTALL_DEX=$INSTALL_DEX" -f release/docker/Dockerfile .
    #- docker login -u "gitlab-ci-token" -p "$CI_BUILD_TOKEN" $CI_REGISTRY
    #- docker push "$CI_REGISTRY_IMAGE:$IMAGE_TAG"
    # Temporary push on dockerhub 
    - docker login -u "duniterteam" -p "$DUNITERTEAM_PASSWD"
    - docker tag "$CI_REGISTRY_IMAGE:$IMAGE_TAG" "duniter/duniter:$IMAGE_TAG"
    - docker push "duniter/duniter:$IMAGE_TAG"

package:test:docker-test-image:
  extends: .docker-build-app-image
  allow_failure: true
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: '$CI_COMMIT_BRANCH == "dev"'
      when: never
    - when: manual
  variables:
    IMAGE_TAG: "test-image"
    INSTALL_DEX: "yes"

package:dev:docker:
  extends: .docker-build-app-image
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == "dev"
  variables:
    IMAGE_TAG: "dev"
    INSTALL_DEX: "yes"

package:prod:docker:
  stage: package
  rules:
    - if: $CI_COMMIT_TAG
  image: docker:git
  tags:
    - docker
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG" -f release/docker/Dockerfile .
    - docker login -u "gitlab-ci-token" -p "$CI_BUILD_TOKEN" $CI_REGISTRY
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG"
    - docker login -u "duniterteam" -p "$DUNITERTEAM_PASSWD"
    - docker tag "$CI_REGISTRY_IMAGE:$CI_BUILD_TAG" "duniter/duniter:$CI_BUILD_TAG"
    - docker push "duniter/duniter:$CI_COMMIT_TAG"
    - docker tag "$CI_REGISTRY_IMAGE:$CI_BUILD_TAG" duniter/duniter
    - docker push duniter/duniter


.release_jobs:
  image: rdadev/jinja2:py3.6
  tags:
    - redshift
  script:
    - python3 .gitlab/releaser

prerelease:
  extends: .release_jobs
  rules:
    - if: $CI_COMMIT_TAG
  stage: prerelease
  variables:
    RELEASE_BIN_DIR: work/bin/
    SOURCE_EXT: '["tar.gz", "zip"]'

publish:
  extends: .release_jobs
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
  stage: release
  variables:
    RELEASE_BIN_DIR: work/bin/
    WIKI_RELEASE: Releases
  allow_failure: false
